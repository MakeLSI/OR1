library(OpenRule1um) {
/* 6: an21 */
  cell(an21) {
    pin(A) { direction: input; }
    pin(B) { direction: input; }
    pin(Y) { direction: output;
              function: "(A&B)"; }
  }

/* 7: an31 */
  cell(an31) {
    pin(A) { direction: input; }
    pin(B) { direction: input; }
    pin(C) { direction: input; }
    pin(Y) { direction: output;
              function: "((A&B)&C)"; }
  }

/* 8: an41 */
  cell(an41) {
    pin(A) { direction: input; }
    pin(B) { direction: input; }
    pin(C) { direction: input; }
    pin(D) { direction: input; }
    pin(Y) { direction: output;
              function: "((A&B)&(C&D))"; }
  }

/* 9: buf1 */
  cell(buf1) {
    pin(A) { direction: input; }
    pin(Y) { direction: output;
              function: "A"; }
  }

/* 10: buf2 */
  cell(buf2) {
    pin(A) { direction: input; }
    pin(Y) { direction: output;
              function: "A"; }
  }
 
/* 11: buf4 */
  cell(buf4) {
    pin(A) { direction: input; }
    pin(Y) { direction: output;
              function: "A"; }
  }
 
/* 12: buf8 */
  cell(buf8) {
    pin(A) { direction: input; }
    pin(Y) { direction: output;
              function: "A"; }
  }

/* 13: cinv */

/* 14: dff1 */
  cell(dff1) {
    ff(IQ, IQN) { clocked_on: CK;
                  next_state: D; }
    pin(CK) { direction: input;
                 clock: true; }
    pin(D) { direction: input; }
    pin(Q) { direction: output;
              function: "IQ"; }
  }

/* 15: dff1m2 */
  cell(dff1m2) {
    ff(IQ, IQN) { clocked_on: CK;
                  next_state: D; }
    pin(CK) { direction: input;
                 clock: true; }
    pin(D) { direction: input; }
    pin(Q) { direction: output;
              function: "IQ"; }
  }

/* 16: exnr */
  cell(exnr) {
    pin(A) { direction: input; }
    pin(B) { direction: input; }
    pin(YB) { direction: output;
              function: "(!(A^B))"; }
  }

/* 17: exor */
  cell(exor) {
    pin(A) { direction: input; }
    pin(B) { direction: input; }
    pin(Y) { direction: output;
              function: "(A^B)"; }
  }

/* 18: inv1 */
  cell(inv1) {
    pin(A) { direction: input; }
    pin(YB) { direction: output;
              function: "(!A)"; }
  }

/* 19: inv2 */
  cell(inv2) {
    pin(A) { direction: input; }
    pin(YB) { direction: output;
              function: "(!A)"; }
  }
 
/* 20: inv4 */
  cell(inv4) {
    pin(A) { direction: input; }
    pin(YB) { direction: output;
              function: "(!A)"; }
  }
 
/* 21: inv8 */
  cell(inv8) {
    pin(A) { direction: input; }
    pin(YB) { direction: output;
              function: "(!A)"; }
  }

/* 22: na21 */
  cell(na21) {
    pin(A) { direction: input; }
    pin(B) { direction: input; }
    pin(YB) { direction: output;
              function: "(!(A&B))"; }
  }

/* 23: na212 (oai21) */
  cell(na212) {
    pin(A0) { direction: input; }
    pin(A1) { direction: input; }
    pin(B0) { direction: input; }
    pin(YB) { direction: output;
              function: "(!((A0|A1)&B0))"; }
  }

/* 24: na222 (oai22) */
  cell(na222) {
    pin(A0) { direction: input; }
    pin(A1) { direction: input; }
    pin(B0) { direction: input; }
    pin(B1) { direction: input; }
    pin(YB) { direction: output;
              function: "(!((A0|A1)&(B0|B1)))"; }
  }

/* 25: na31 */
  cell(na31) {
    pin(A) { direction: input; }
    pin(B) { direction: input; }
    pin(C) { direction: input; }
    pin(YB) { direction: output;
              function: "(!((A&B)&C))"; }
  }
           
/* 26: na41 */
  cell(na41) {
    pin(A) { direction: input; }
    pin(B) { direction: input; }
    pin(C) { direction: input; }
    pin(D) { direction: input; }
    pin(YB) { direction: output;
              function: "(!((A&B)&(C&D)))"; }
  }
           
/* 27: nr21 */
  cell(nr21) {
    pin(A) { direction: input; }
    pin(B) { direction: input; }
    pin(YB) { direction: output;
              function: "(!(A|B))"; }
  }
           
/* 28: nr212 */
  cell(nr212) {
    pin(A0) { direction: input; }
    pin(A1) { direction: input; }
    pin(B0) { direction: input; }
    pin(YB) { direction: output;
              function: "(!((A0&A1)|B0))"; }
  }

/* 29: nr222 */
  cell(nr222) {
    pin(A0) { direction: input; }
    pin(A1) { direction: input; }
    pin(B0) { direction: input; }
    pin(B1) { direction: input; }
    pin(YB) { direction: output;
              function: "(!((A0&A1)|(B0&B1)))"; }
  }

/* 30: nr31 */
  cell(nr31) {
    pin(A) { direction: input; }
    pin(B) { direction: input; }
    pin(C) { direction: input; }
    pin(YB) { direction: output;
              function: "(!((A|B)|C))"; }
  }

/* 31: or21 */
  cell(or21) {
    pin(A) { direction: input; }
    pin(B) { direction: input; }
    pin(Y) { direction: output;
              function: "(A|B)"; }
  }
           
/* 32: or31 */
  cell(or31) {
    pin(A) { direction: input; }
    pin(B) { direction: input; }
    pin(C) { direction: input; }
    pin(Y) { direction: output;
              function: "((A|B)|C)"; }
  }
           
/* 33: rff1 */
  cell(rff1) {
    ff(IQ, IQN) { clocked_on: CK;
                  next_state: D; 
                  clear: "R"; }
    pin(CK) { direction: input;
                 clock: true; }
    pin(D) { direction: input; }
    pin(R) { direction: input; }
    pin(Q) { direction: output;
              function: "IQ"; }
  }

/* 34: rff1m2 */
  cell(rff1m2) {
    ff(IQ, IQN) { clocked_on: CK;
                  next_state: D; 
                  clear: "R";}
    pin(CK) { direction: input;
                 clock: true; }
    pin(D) { direction: input; }
    pin(R) { direction: input; }
    pin(Q) { direction: output;
              function: "IQ"; }
  }

/* 35: sff1 */

/* 36: sff1m2 */
           
}
